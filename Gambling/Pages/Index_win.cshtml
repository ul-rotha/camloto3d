@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js"></script>
<link rel="stylesheet" href="~/css/main.css" type="text/css" />
<script type="text/javascript" src="~/js/Winwheel.js"></script>

<div align="center">
    <div>
        <button type="button" class="btn btn-danger btn-lg">ខ្លា</button>
        <button type="button" class="btn btn-primary btn-lg">មាន់</button>
        <button type="button" class="btn btn-info btn-lg">បង្គង</button>
        <button type="button" class="btn btn-secondary btn-lg">ឃ្លោក</button>
        <button type="button" class="btn btn-success btn-lg">ត្រី</button>
    </div>
    <table cellpadding="0" cellspacing="0" border="0">
        <tr>
            <td>
                <div class="power_controls">
                    <br />
                    <br />
                    <table class="power" cellpadding="10" cellspacing="0">
                        <tr>
                            <th align="center">Power</th>
                        </tr>
                        <tr>
                            <td width="78" align="center" id="pw3" onClick="powerSelected(3);">High</td>
                        </tr>
                        <tr>
                            <td align="center" id="pw2" onClick="powerSelected(2);">Med</td>
                        </tr>
                        <tr>
                            <td align="center" id="pw1" onClick="powerSelected(1);">Low</td>
                        </tr>
                    </table>
                    <br />
                    <img id="spin_button" src="~/file/spin_off.png" alt="Spin" onClick="startSpin();" />
                    <br /><br />
                    &nbsp;&nbsp;<a href="#" onClick="resetWheel(); return false;">Play Again
                </div>
            </td>
            <td width="438" height="582" class="the_wheel" align="center" valign="center">
                <canvas id="canvas" width="434" height="434"
                        data-responsiveMinWidth="180"
                        data-responsiveScaleHeight="true"
                        data-responsiveMargin="50">
                    <p style="{color: white}" align="center">Sorry, your browser doesn't support canvas. Please try another.</p>
                </canvas>
            </td>
        </tr>
    </table>
</div>

<script>
        // Create new wheel object specifying the parameters at creation time.
        var theWheel = new Winwheel({

            'numSegments': 18,     // Specify number of segments.
            //'outerRadius': 210,   
             //'outerRadius'  : 212,       // The size of the wheel.
                'centerX'      : 217,       // Used to position on the background correctly.
                'centerY'      : 219,
            'textFontSize': 17,
            'textFontFamily': Muol,// Set font size as desired.
            'responsive': true,
            'segments':        // Define segments including colour and text.
                [
                    { 'fillStyle': '#eae56f', 'text': '1 មាន់ 1x3' },
                    { 'fillStyle': '#eae56f', 'text': '2 អរគុណ' },
                    { 'fillStyle': '#89f26e', 'text': '3 មាន់ 1x5' },
                    { 'fillStyle': '#eae56f', 'text': '4 អរគុណ' },
                    { 'fillStyle': '#7de6ef', 'text': '5 មាន់ 1x15' },
                    {'fillStyle': '#7de6ef', 'text': '6 មាន់ 1x15' },
                    { 'fillStyle': '#eae56f', 'text': '7 ខ្លា 1x3' },
                    { 'fillStyle': '#eae56f', 'text': '8 អរគុណ' },
                    { 'fillStyle': '#89f26e', 'text': '9 ខ្លា 1x5' },
                    { 'fillStyle': '#7de6ef', 'text': '10 ខ្លា 1x15' },
                    { 'fillStyle': '#eae56f', 'text': '11 អរគុណ' },
                    { 'fillStyle': '#eae56f', 'text': '12 ឃ្លោក 1x3' },
                    { 'fillStyle': '#89f26e', 'text': '13 ឃ្លោក 1x5' },
                    { 'fillStyle': '#eae56f', 'text': '14 អរគុណ' },
                    { 'fillStyle': '#7de6ef', 'text': '15 ឃ្លោក 1x15' },
                    { 'fillStyle': '#eae56f', 'text': '16 ត្រី 1x3' },
                    { 'fillStyle': '#89f26e', 'text': '17 ត្រី 1x5' },
                    { 'fillStyle': '#7de6ef', 'text': '18 ត្រី 1x15' },
                ],
            'animation':           // Specify the animation to use.
            {
                'type': 'spinToStop',
                'duration': 15,
                'spins': 8,
                'callbackFinished': alertPrize,
                'callbackSound': playSound,   // Function to call when the tick sound is to be triggered.
                'soundTrigger': 'pin'        // Specify pins are to trigger the sound, the other option is 'segment'.
            },
            'pins':
            {
                'number': 16 // Number of pins. They space evenly around the wheel.
            }
        });



        // -----------------------------------------------------------------
        // This function is called when the segment under the prize pointer changes
        // we can play a small tick sound here like you would expect on real prizewheels.
        // -----------------------------------------------------------------

        //var audio = new Audio('@Url.Content("file/tick.mp3")');  // Create audio object and load tick.mp3 file.
        var audio = new Audio('file/tick.mp3');  // Create audio object and load tick.mp3 file.


        function playSound() {
            // Stop and rewind the sound if it already happens to be playing.
            //audio.currentTime = 0;
            //   audio.pause();

            // Play the sound.
            //audio.play();

            audio.pause();
            audio.currentTime = 0;
            var nopromise = {
               catch : new Function()
            };
            (audio.play() || nopromise).catch(function(){}); ;

        }

        // -------------------------------------------------------
        // Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters
        // note the indicated segment is passed in as a parmeter as 99% of the time you will want to know this to inform the user of their prize.
        // -------------------------------------------------------
        function alertPrize(indicatedSegment) {
            // Do basic alert of the segment text.
            // You would probably want to do something more interesting with this information.
            //alert("You have won " + indicatedSegment.text);
        }

        // =======================================================================================================================
        // Code below for the power controls etc which is entirely optional. You can spin the wheel simply by
        // calling theWheel.startAnimation();
        // =======================================================================================================================
        var wheelPower = 0;
        var wheelSpinning = false;

        // -------------------------------------------------------
        // Function to handle the onClick on the power buttons.
        // -------------------------------------------------------
        function powerSelected(powerLevel) {
            // Ensure that power can't be changed while wheel is spinning.
            if (wheelSpinning == false) {
                // Reset all to grey incase this is not the first time the user has selected the power.
                document.getElementById('pw1').className = "";
                document.getElementById('pw2').className = "";
                document.getElementById('pw3').className = "";

                // Now light up all cells below-and-including the one selected by changing the class.
                if (powerLevel >= 1) {
                    document.getElementById('pw1').className = "pw1";
                }

                if (powerLevel >= 2) {
                    document.getElementById('pw2').className = "pw2";
                }

                if (powerLevel >= 3) {
                    document.getElementById('pw3').className = "pw3";
                }

                // Set wheelPower var used when spin button is clicked.
                wheelPower = powerLevel;

                // Light up the spin button by changing it's source image and adding a clickable class to it.
                document.getElementById('spin_button').src ='@Url.Content("file/spin_on.png")';
                document.getElementById('spin_button').className = "clickable";
            }
        }

        function calculatePrize() {
            //var stopAt = theWheel.getRandomForSegment(7);

            var xhr = new XMLHttpRequest();
            xhr.open("GET", "https://reqres.in/api/products/3", true);
            xhr.onload = function () {


                console.log(xhr.responseText);
                var valueSection = Math.floor(Math.random() * 10) + 1;
                console.log(valueSection);

                theWheel.animation.stopAngle = theWheel.getRandomForSegment(valueSection);
                theWheel.startAnimation();
            };
            xhr.send();



        }

        // -------------------------------------------------------
        // Click handler for spin button.
        // -------------------------------------------------------
        function startSpin() {
            // Ensure that spinning can't be clicked again while already running.
            if (wheelSpinning == false) {
                // Based on the power level selected adjust the number of spins for the wheel, the more times is has
                // to rotate with the duration of the animation the quicker the wheel spins.
                if (wheelPower == 1) {
                    theWheel.animation.spins = 3;
                }
                else if (wheelPower == 2) {
                    theWheel.animation.spins = 8;
                }
                else if (wheelPower == 3) {
                    theWheel.animation.spins = 15;
                }

                calculatePrize();

                // Disable the spin button so can't click again while wheel is spinning.
                document.getElementById('spin_button').src = 'file/spin_off.png';//'@Url.Content("file/spin_off.png")';
                document.getElementById('spin_button').className = "";

                // Begin the spin animation by calling startAnimation on the wheel object.
                theWheel.startAnimation();

                // Set to true so that power can't be changed and spin button re-enabled during
                // the current animation. The user will have to reset before spinning again.
                wheelSpinning = true;
            }
        }

        // -------------------------------------------------------
        // Function for reset button.
        // -------------------------------------------------------
        function resetWheel() {

            theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.
            theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.
            theWheel.draw();                // Call draw to render changes to the wheel.
            audio.pause();
            document.getElementById('pw1').className = "";  // Remove all colours from the power level indicators.
            document.getElementById('pw2').className = "";
            document.getElementById('pw3').className = "";

            wheelSpinning = false;          // Reset to false to power buttons and spin can be clicked again.
        }
</script>